/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package movieservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-21")
public class Movie implements org.apache.thrift.TBase<Movie, Movie._Fields>, java.io.Serializable, Cloneable, Comparable<Movie> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Movie");

  private static final org.apache.thrift.protocol.TField ADULT_FIELD_DESC = new org.apache.thrift.protocol.TField("adult", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BACKDROP_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("backdrop_path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BELONGS_TO_COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("belongs_to_collection", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("budget", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField GENRES_FIELD_DESC = new org.apache.thrift.protocol.TField("genres", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField HOMEPAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("homepage", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField IMDB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imdb_id", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ORIGINAL_LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("original_language", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ORIGINAL_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("original_title", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OVERVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("overview", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField POPULARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("popularity", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField POSTER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("poster_path", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PRODUCTION_COMPANIES_FIELD_DESC = new org.apache.thrift.protocol.TField("production_companies", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField PRODUCTION_COUNTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("production_countries", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField RELEASE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("release_date", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REVENUE_FIELD_DESC = new org.apache.thrift.protocol.TField("revenue", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField RUNTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField SPOKEN_LANGUAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("spoken_languages", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TAGLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("tagline", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("video", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField VOTE_AVERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("vote_average", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField VOTE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("vote_count", org.apache.thrift.protocol.TType.I32, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MovieStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MovieTupleSchemeFactory());
  }

  public boolean adult; // required
  public String backdrop_path; // optional
  public Collection belongs_to_collection; // optional
  public long budget; // required
  public List<Genre> genres; // required
  public String homepage; // optional
  public long id; // required
  public String imdb_id; // required
  public String original_language; // required
  public String original_title; // required
  public String overview; // required
  public double popularity; // required
  public String poster_path; // optional
  public List<ProductionCompany> production_companies; // required
  public List<ProductionCountry> production_countries; // required
  public String release_date; // required
  public long revenue; // required
  public int runtime; // required
  public List<SpokenLanguage> spoken_languages; // required
  public String status; // required
  public String tagline; // required
  public String title; // required
  public boolean video; // required
  public double vote_average; // required
  public int vote_count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADULT((short)1, "adult"),
    BACKDROP_PATH((short)2, "backdrop_path"),
    BELONGS_TO_COLLECTION((short)3, "belongs_to_collection"),
    BUDGET((short)4, "budget"),
    GENRES((short)5, "genres"),
    HOMEPAGE((short)6, "homepage"),
    ID((short)7, "id"),
    IMDB_ID((short)8, "imdb_id"),
    ORIGINAL_LANGUAGE((short)9, "original_language"),
    ORIGINAL_TITLE((short)10, "original_title"),
    OVERVIEW((short)11, "overview"),
    POPULARITY((short)12, "popularity"),
    POSTER_PATH((short)13, "poster_path"),
    PRODUCTION_COMPANIES((short)14, "production_companies"),
    PRODUCTION_COUNTRIES((short)15, "production_countries"),
    RELEASE_DATE((short)16, "release_date"),
    REVENUE((short)17, "revenue"),
    RUNTIME((short)18, "runtime"),
    SPOKEN_LANGUAGES((short)19, "spoken_languages"),
    STATUS((short)20, "status"),
    TAGLINE((short)21, "tagline"),
    TITLE((short)22, "title"),
    VIDEO((short)23, "video"),
    VOTE_AVERAGE((short)24, "vote_average"),
    VOTE_COUNT((short)25, "vote_count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADULT
          return ADULT;
        case 2: // BACKDROP_PATH
          return BACKDROP_PATH;
        case 3: // BELONGS_TO_COLLECTION
          return BELONGS_TO_COLLECTION;
        case 4: // BUDGET
          return BUDGET;
        case 5: // GENRES
          return GENRES;
        case 6: // HOMEPAGE
          return HOMEPAGE;
        case 7: // ID
          return ID;
        case 8: // IMDB_ID
          return IMDB_ID;
        case 9: // ORIGINAL_LANGUAGE
          return ORIGINAL_LANGUAGE;
        case 10: // ORIGINAL_TITLE
          return ORIGINAL_TITLE;
        case 11: // OVERVIEW
          return OVERVIEW;
        case 12: // POPULARITY
          return POPULARITY;
        case 13: // POSTER_PATH
          return POSTER_PATH;
        case 14: // PRODUCTION_COMPANIES
          return PRODUCTION_COMPANIES;
        case 15: // PRODUCTION_COUNTRIES
          return PRODUCTION_COUNTRIES;
        case 16: // RELEASE_DATE
          return RELEASE_DATE;
        case 17: // REVENUE
          return REVENUE;
        case 18: // RUNTIME
          return RUNTIME;
        case 19: // SPOKEN_LANGUAGES
          return SPOKEN_LANGUAGES;
        case 20: // STATUS
          return STATUS;
        case 21: // TAGLINE
          return TAGLINE;
        case 22: // TITLE
          return TITLE;
        case 23: // VIDEO
          return VIDEO;
        case 24: // VOTE_AVERAGE
          return VOTE_AVERAGE;
        case 25: // VOTE_COUNT
          return VOTE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADULT_ISSET_ID = 0;
  private static final int __BUDGET_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __POPULARITY_ISSET_ID = 3;
  private static final int __REVENUE_ISSET_ID = 4;
  private static final int __RUNTIME_ISSET_ID = 5;
  private static final int __VIDEO_ISSET_ID = 6;
  private static final int __VOTE_AVERAGE_ISSET_ID = 7;
  private static final int __VOTE_COUNT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BACKDROP_PATH,_Fields.BELONGS_TO_COLLECTION,_Fields.HOMEPAGE,_Fields.POSTER_PATH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADULT, new org.apache.thrift.meta_data.FieldMetaData("adult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BACKDROP_PATH, new org.apache.thrift.meta_data.FieldMetaData("backdrop_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BELONGS_TO_COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("belongs_to_collection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Collection")));
    tmpMap.put(_Fields.BUDGET, new org.apache.thrift.meta_data.FieldMetaData("budget", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GENRES, new org.apache.thrift.meta_data.FieldMetaData("genres", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Genre"))));
    tmpMap.put(_Fields.HOMEPAGE, new org.apache.thrift.meta_data.FieldMetaData("homepage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IMDB_ID, new org.apache.thrift.meta_data.FieldMetaData("imdb_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("original_language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_TITLE, new org.apache.thrift.meta_data.FieldMetaData("original_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERVIEW, new org.apache.thrift.meta_data.FieldMetaData("overview", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POPULARITY, new org.apache.thrift.meta_data.FieldMetaData("popularity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSTER_PATH, new org.apache.thrift.meta_data.FieldMetaData("poster_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCTION_COMPANIES, new org.apache.thrift.meta_data.FieldMetaData("production_companies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ProductionCompany"))));
    tmpMap.put(_Fields.PRODUCTION_COUNTRIES, new org.apache.thrift.meta_data.FieldMetaData("production_countries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ProductionCountry"))));
    tmpMap.put(_Fields.RELEASE_DATE, new org.apache.thrift.meta_data.FieldMetaData("release_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVENUE, new org.apache.thrift.meta_data.FieldMetaData("revenue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNTIME, new org.apache.thrift.meta_data.FieldMetaData("runtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPOKEN_LANGUAGES, new org.apache.thrift.meta_data.FieldMetaData("spoken_languages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SpokenLanguage"))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGLINE, new org.apache.thrift.meta_data.FieldMetaData("tagline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIDEO, new org.apache.thrift.meta_data.FieldMetaData("video", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VOTE_AVERAGE, new org.apache.thrift.meta_data.FieldMetaData("vote_average", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOTE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("vote_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Movie.class, metaDataMap);
  }

  public Movie() {
  }

  public Movie(
    boolean adult,
    long budget,
    List<Genre> genres,
    long id,
    String imdb_id,
    String original_language,
    String original_title,
    String overview,
    double popularity,
    List<ProductionCompany> production_companies,
    List<ProductionCountry> production_countries,
    String release_date,
    long revenue,
    int runtime,
    List<SpokenLanguage> spoken_languages,
    String status,
    String tagline,
    String title,
    boolean video,
    double vote_average,
    int vote_count)
  {
    this();
    this.adult = adult;
    setAdultIsSet(true);
    this.budget = budget;
    setBudgetIsSet(true);
    this.genres = genres;
    this.id = id;
    setIdIsSet(true);
    this.imdb_id = imdb_id;
    this.original_language = original_language;
    this.original_title = original_title;
    this.overview = overview;
    this.popularity = popularity;
    setPopularityIsSet(true);
    this.production_companies = production_companies;
    this.production_countries = production_countries;
    this.release_date = release_date;
    this.revenue = revenue;
    setRevenueIsSet(true);
    this.runtime = runtime;
    setRuntimeIsSet(true);
    this.spoken_languages = spoken_languages;
    this.status = status;
    this.tagline = tagline;
    this.title = title;
    this.video = video;
    setVideoIsSet(true);
    this.vote_average = vote_average;
    setVote_averageIsSet(true);
    this.vote_count = vote_count;
    setVote_countIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Movie(Movie other) {
    __isset_bitfield = other.__isset_bitfield;
    this.adult = other.adult;
    if (other.isSetBackdrop_path()) {
      this.backdrop_path = other.backdrop_path;
    }
    if (other.isSetBelongs_to_collection()) {
      this.belongs_to_collection = other.belongs_to_collection;
    }
    this.budget = other.budget;
    if (other.isSetGenres()) {
      List<Genre> __this__genres = new ArrayList<Genre>(other.genres.size());
      for (Genre other_element : other.genres) {
        __this__genres.add(other_element);
      }
      this.genres = __this__genres;
    }
    if (other.isSetHomepage()) {
      this.homepage = other.homepage;
    }
    this.id = other.id;
    if (other.isSetImdb_id()) {
      this.imdb_id = other.imdb_id;
    }
    if (other.isSetOriginal_language()) {
      this.original_language = other.original_language;
    }
    if (other.isSetOriginal_title()) {
      this.original_title = other.original_title;
    }
    if (other.isSetOverview()) {
      this.overview = other.overview;
    }
    this.popularity = other.popularity;
    if (other.isSetPoster_path()) {
      this.poster_path = other.poster_path;
    }
    if (other.isSetProduction_companies()) {
      List<ProductionCompany> __this__production_companies = new ArrayList<ProductionCompany>(other.production_companies.size());
      for (ProductionCompany other_element : other.production_companies) {
        __this__production_companies.add(other_element);
      }
      this.production_companies = __this__production_companies;
    }
    if (other.isSetProduction_countries()) {
      List<ProductionCountry> __this__production_countries = new ArrayList<ProductionCountry>(other.production_countries.size());
      for (ProductionCountry other_element : other.production_countries) {
        __this__production_countries.add(other_element);
      }
      this.production_countries = __this__production_countries;
    }
    if (other.isSetRelease_date()) {
      this.release_date = other.release_date;
    }
    this.revenue = other.revenue;
    this.runtime = other.runtime;
    if (other.isSetSpoken_languages()) {
      List<SpokenLanguage> __this__spoken_languages = new ArrayList<SpokenLanguage>(other.spoken_languages.size());
      for (SpokenLanguage other_element : other.spoken_languages) {
        __this__spoken_languages.add(other_element);
      }
      this.spoken_languages = __this__spoken_languages;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetTagline()) {
      this.tagline = other.tagline;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.video = other.video;
    this.vote_average = other.vote_average;
    this.vote_count = other.vote_count;
  }

  public Movie deepCopy() {
    return new Movie(this);
  }

  @Override
  public void clear() {
    setAdultIsSet(false);
    this.adult = false;
    this.backdrop_path = null;
    this.belongs_to_collection = null;
    setBudgetIsSet(false);
    this.budget = 0;
    this.genres = null;
    this.homepage = null;
    setIdIsSet(false);
    this.id = 0;
    this.imdb_id = null;
    this.original_language = null;
    this.original_title = null;
    this.overview = null;
    setPopularityIsSet(false);
    this.popularity = 0.0;
    this.poster_path = null;
    this.production_companies = null;
    this.production_countries = null;
    this.release_date = null;
    setRevenueIsSet(false);
    this.revenue = 0;
    setRuntimeIsSet(false);
    this.runtime = 0;
    this.spoken_languages = null;
    this.status = null;
    this.tagline = null;
    this.title = null;
    setVideoIsSet(false);
    this.video = false;
    setVote_averageIsSet(false);
    this.vote_average = 0.0;
    setVote_countIsSet(false);
    this.vote_count = 0;
  }

  public boolean isAdult() {
    return this.adult;
  }

  public Movie setAdult(boolean adult) {
    this.adult = adult;
    setAdultIsSet(true);
    return this;
  }

  public void unsetAdult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADULT_ISSET_ID);
  }

  /** Returns true if field adult is set (has been assigned a value) and false otherwise */
  public boolean isSetAdult() {
    return EncodingUtils.testBit(__isset_bitfield, __ADULT_ISSET_ID);
  }

  public void setAdultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADULT_ISSET_ID, value);
  }

  public String getBackdrop_path() {
    return this.backdrop_path;
  }

  public Movie setBackdrop_path(String backdrop_path) {
    this.backdrop_path = backdrop_path;
    return this;
  }

  public void unsetBackdrop_path() {
    this.backdrop_path = null;
  }

  /** Returns true if field backdrop_path is set (has been assigned a value) and false otherwise */
  public boolean isSetBackdrop_path() {
    return this.backdrop_path != null;
  }

  public void setBackdrop_pathIsSet(boolean value) {
    if (!value) {
      this.backdrop_path = null;
    }
  }

  public Collection getBelongs_to_collection() {
    return this.belongs_to_collection;
  }

  public Movie setBelongs_to_collection(Collection belongs_to_collection) {
    this.belongs_to_collection = belongs_to_collection;
    return this;
  }

  public void unsetBelongs_to_collection() {
    this.belongs_to_collection = null;
  }

  /** Returns true if field belongs_to_collection is set (has been assigned a value) and false otherwise */
  public boolean isSetBelongs_to_collection() {
    return this.belongs_to_collection != null;
  }

  public void setBelongs_to_collectionIsSet(boolean value) {
    if (!value) {
      this.belongs_to_collection = null;
    }
  }

  public long getBudget() {
    return this.budget;
  }

  public Movie setBudget(long budget) {
    this.budget = budget;
    setBudgetIsSet(true);
    return this;
  }

  public void unsetBudget() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUDGET_ISSET_ID);
  }

  /** Returns true if field budget is set (has been assigned a value) and false otherwise */
  public boolean isSetBudget() {
    return EncodingUtils.testBit(__isset_bitfield, __BUDGET_ISSET_ID);
  }

  public void setBudgetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUDGET_ISSET_ID, value);
  }

  public int getGenresSize() {
    return (this.genres == null) ? 0 : this.genres.size();
  }

  public java.util.Iterator<Genre> getGenresIterator() {
    return (this.genres == null) ? null : this.genres.iterator();
  }

  public void addToGenres(Genre elem) {
    if (this.genres == null) {
      this.genres = new ArrayList<Genre>();
    }
    this.genres.add(elem);
  }

  public List<Genre> getGenres() {
    return this.genres;
  }

  public Movie setGenres(List<Genre> genres) {
    this.genres = genres;
    return this;
  }

  public void unsetGenres() {
    this.genres = null;
  }

  /** Returns true if field genres is set (has been assigned a value) and false otherwise */
  public boolean isSetGenres() {
    return this.genres != null;
  }

  public void setGenresIsSet(boolean value) {
    if (!value) {
      this.genres = null;
    }
  }

  public String getHomepage() {
    return this.homepage;
  }

  public Movie setHomepage(String homepage) {
    this.homepage = homepage;
    return this;
  }

  public void unsetHomepage() {
    this.homepage = null;
  }

  /** Returns true if field homepage is set (has been assigned a value) and false otherwise */
  public boolean isSetHomepage() {
    return this.homepage != null;
  }

  public void setHomepageIsSet(boolean value) {
    if (!value) {
      this.homepage = null;
    }
  }

  public long getId() {
    return this.id;
  }

  public Movie setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getImdb_id() {
    return this.imdb_id;
  }

  public Movie setImdb_id(String imdb_id) {
    this.imdb_id = imdb_id;
    return this;
  }

  public void unsetImdb_id() {
    this.imdb_id = null;
  }

  /** Returns true if field imdb_id is set (has been assigned a value) and false otherwise */
  public boolean isSetImdb_id() {
    return this.imdb_id != null;
  }

  public void setImdb_idIsSet(boolean value) {
    if (!value) {
      this.imdb_id = null;
    }
  }

  public String getOriginal_language() {
    return this.original_language;
  }

  public Movie setOriginal_language(String original_language) {
    this.original_language = original_language;
    return this;
  }

  public void unsetOriginal_language() {
    this.original_language = null;
  }

  /** Returns true if field original_language is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginal_language() {
    return this.original_language != null;
  }

  public void setOriginal_languageIsSet(boolean value) {
    if (!value) {
      this.original_language = null;
    }
  }

  public String getOriginal_title() {
    return this.original_title;
  }

  public Movie setOriginal_title(String original_title) {
    this.original_title = original_title;
    return this;
  }

  public void unsetOriginal_title() {
    this.original_title = null;
  }

  /** Returns true if field original_title is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginal_title() {
    return this.original_title != null;
  }

  public void setOriginal_titleIsSet(boolean value) {
    if (!value) {
      this.original_title = null;
    }
  }

  public String getOverview() {
    return this.overview;
  }

  public Movie setOverview(String overview) {
    this.overview = overview;
    return this;
  }

  public void unsetOverview() {
    this.overview = null;
  }

  /** Returns true if field overview is set (has been assigned a value) and false otherwise */
  public boolean isSetOverview() {
    return this.overview != null;
  }

  public void setOverviewIsSet(boolean value) {
    if (!value) {
      this.overview = null;
    }
  }

  public double getPopularity() {
    return this.popularity;
  }

  public Movie setPopularity(double popularity) {
    this.popularity = popularity;
    setPopularityIsSet(true);
    return this;
  }

  public void unsetPopularity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POPULARITY_ISSET_ID);
  }

  /** Returns true if field popularity is set (has been assigned a value) and false otherwise */
  public boolean isSetPopularity() {
    return EncodingUtils.testBit(__isset_bitfield, __POPULARITY_ISSET_ID);
  }

  public void setPopularityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POPULARITY_ISSET_ID, value);
  }

  public String getPoster_path() {
    return this.poster_path;
  }

  public Movie setPoster_path(String poster_path) {
    this.poster_path = poster_path;
    return this;
  }

  public void unsetPoster_path() {
    this.poster_path = null;
  }

  /** Returns true if field poster_path is set (has been assigned a value) and false otherwise */
  public boolean isSetPoster_path() {
    return this.poster_path != null;
  }

  public void setPoster_pathIsSet(boolean value) {
    if (!value) {
      this.poster_path = null;
    }
  }

  public int getProduction_companiesSize() {
    return (this.production_companies == null) ? 0 : this.production_companies.size();
  }

  public java.util.Iterator<ProductionCompany> getProduction_companiesIterator() {
    return (this.production_companies == null) ? null : this.production_companies.iterator();
  }

  public void addToProduction_companies(ProductionCompany elem) {
    if (this.production_companies == null) {
      this.production_companies = new ArrayList<ProductionCompany>();
    }
    this.production_companies.add(elem);
  }

  public List<ProductionCompany> getProduction_companies() {
    return this.production_companies;
  }

  public Movie setProduction_companies(List<ProductionCompany> production_companies) {
    this.production_companies = production_companies;
    return this;
  }

  public void unsetProduction_companies() {
    this.production_companies = null;
  }

  /** Returns true if field production_companies is set (has been assigned a value) and false otherwise */
  public boolean isSetProduction_companies() {
    return this.production_companies != null;
  }

  public void setProduction_companiesIsSet(boolean value) {
    if (!value) {
      this.production_companies = null;
    }
  }

  public int getProduction_countriesSize() {
    return (this.production_countries == null) ? 0 : this.production_countries.size();
  }

  public java.util.Iterator<ProductionCountry> getProduction_countriesIterator() {
    return (this.production_countries == null) ? null : this.production_countries.iterator();
  }

  public void addToProduction_countries(ProductionCountry elem) {
    if (this.production_countries == null) {
      this.production_countries = new ArrayList<ProductionCountry>();
    }
    this.production_countries.add(elem);
  }

  public List<ProductionCountry> getProduction_countries() {
    return this.production_countries;
  }

  public Movie setProduction_countries(List<ProductionCountry> production_countries) {
    this.production_countries = production_countries;
    return this;
  }

  public void unsetProduction_countries() {
    this.production_countries = null;
  }

  /** Returns true if field production_countries is set (has been assigned a value) and false otherwise */
  public boolean isSetProduction_countries() {
    return this.production_countries != null;
  }

  public void setProduction_countriesIsSet(boolean value) {
    if (!value) {
      this.production_countries = null;
    }
  }

  public String getRelease_date() {
    return this.release_date;
  }

  public Movie setRelease_date(String release_date) {
    this.release_date = release_date;
    return this;
  }

  public void unsetRelease_date() {
    this.release_date = null;
  }

  /** Returns true if field release_date is set (has been assigned a value) and false otherwise */
  public boolean isSetRelease_date() {
    return this.release_date != null;
  }

  public void setRelease_dateIsSet(boolean value) {
    if (!value) {
      this.release_date = null;
    }
  }

  public long getRevenue() {
    return this.revenue;
  }

  public Movie setRevenue(long revenue) {
    this.revenue = revenue;
    setRevenueIsSet(true);
    return this;
  }

  public void unsetRevenue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVENUE_ISSET_ID);
  }

  /** Returns true if field revenue is set (has been assigned a value) and false otherwise */
  public boolean isSetRevenue() {
    return EncodingUtils.testBit(__isset_bitfield, __REVENUE_ISSET_ID);
  }

  public void setRevenueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVENUE_ISSET_ID, value);
  }

  public int getRuntime() {
    return this.runtime;
  }

  public Movie setRuntime(int runtime) {
    this.runtime = runtime;
    setRuntimeIsSet(true);
    return this;
  }

  public void unsetRuntime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_ISSET_ID);
  }

  /** Returns true if field runtime is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNTIME_ISSET_ID);
  }

  public void setRuntimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNTIME_ISSET_ID, value);
  }

  public int getSpoken_languagesSize() {
    return (this.spoken_languages == null) ? 0 : this.spoken_languages.size();
  }

  public java.util.Iterator<SpokenLanguage> getSpoken_languagesIterator() {
    return (this.spoken_languages == null) ? null : this.spoken_languages.iterator();
  }

  public void addToSpoken_languages(SpokenLanguage elem) {
    if (this.spoken_languages == null) {
      this.spoken_languages = new ArrayList<SpokenLanguage>();
    }
    this.spoken_languages.add(elem);
  }

  public List<SpokenLanguage> getSpoken_languages() {
    return this.spoken_languages;
  }

  public Movie setSpoken_languages(List<SpokenLanguage> spoken_languages) {
    this.spoken_languages = spoken_languages;
    return this;
  }

  public void unsetSpoken_languages() {
    this.spoken_languages = null;
  }

  /** Returns true if field spoken_languages is set (has been assigned a value) and false otherwise */
  public boolean isSetSpoken_languages() {
    return this.spoken_languages != null;
  }

  public void setSpoken_languagesIsSet(boolean value) {
    if (!value) {
      this.spoken_languages = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public Movie setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getTagline() {
    return this.tagline;
  }

  public Movie setTagline(String tagline) {
    this.tagline = tagline;
    return this;
  }

  public void unsetTagline() {
    this.tagline = null;
  }

  /** Returns true if field tagline is set (has been assigned a value) and false otherwise */
  public boolean isSetTagline() {
    return this.tagline != null;
  }

  public void setTaglineIsSet(boolean value) {
    if (!value) {
      this.tagline = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public Movie setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public boolean isVideo() {
    return this.video;
  }

  public Movie setVideo(boolean video) {
    this.video = video;
    setVideoIsSet(true);
    return this;
  }

  public void unsetVideo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIDEO_ISSET_ID);
  }

  /** Returns true if field video is set (has been assigned a value) and false otherwise */
  public boolean isSetVideo() {
    return EncodingUtils.testBit(__isset_bitfield, __VIDEO_ISSET_ID);
  }

  public void setVideoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIDEO_ISSET_ID, value);
  }

  public double getVote_average() {
    return this.vote_average;
  }

  public Movie setVote_average(double vote_average) {
    this.vote_average = vote_average;
    setVote_averageIsSet(true);
    return this;
  }

  public void unsetVote_average() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOTE_AVERAGE_ISSET_ID);
  }

  /** Returns true if field vote_average is set (has been assigned a value) and false otherwise */
  public boolean isSetVote_average() {
    return EncodingUtils.testBit(__isset_bitfield, __VOTE_AVERAGE_ISSET_ID);
  }

  public void setVote_averageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOTE_AVERAGE_ISSET_ID, value);
  }

  public int getVote_count() {
    return this.vote_count;
  }

  public Movie setVote_count(int vote_count) {
    this.vote_count = vote_count;
    setVote_countIsSet(true);
    return this;
  }

  public void unsetVote_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOTE_COUNT_ISSET_ID);
  }

  /** Returns true if field vote_count is set (has been assigned a value) and false otherwise */
  public boolean isSetVote_count() {
    return EncodingUtils.testBit(__isset_bitfield, __VOTE_COUNT_ISSET_ID);
  }

  public void setVote_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOTE_COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADULT:
      if (value == null) {
        unsetAdult();
      } else {
        setAdult((Boolean)value);
      }
      break;

    case BACKDROP_PATH:
      if (value == null) {
        unsetBackdrop_path();
      } else {
        setBackdrop_path((String)value);
      }
      break;

    case BELONGS_TO_COLLECTION:
      if (value == null) {
        unsetBelongs_to_collection();
      } else {
        setBelongs_to_collection((Collection)value);
      }
      break;

    case BUDGET:
      if (value == null) {
        unsetBudget();
      } else {
        setBudget((Long)value);
      }
      break;

    case GENRES:
      if (value == null) {
        unsetGenres();
      } else {
        setGenres((List<Genre>)value);
      }
      break;

    case HOMEPAGE:
      if (value == null) {
        unsetHomepage();
      } else {
        setHomepage((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case IMDB_ID:
      if (value == null) {
        unsetImdb_id();
      } else {
        setImdb_id((String)value);
      }
      break;

    case ORIGINAL_LANGUAGE:
      if (value == null) {
        unsetOriginal_language();
      } else {
        setOriginal_language((String)value);
      }
      break;

    case ORIGINAL_TITLE:
      if (value == null) {
        unsetOriginal_title();
      } else {
        setOriginal_title((String)value);
      }
      break;

    case OVERVIEW:
      if (value == null) {
        unsetOverview();
      } else {
        setOverview((String)value);
      }
      break;

    case POPULARITY:
      if (value == null) {
        unsetPopularity();
      } else {
        setPopularity((Double)value);
      }
      break;

    case POSTER_PATH:
      if (value == null) {
        unsetPoster_path();
      } else {
        setPoster_path((String)value);
      }
      break;

    case PRODUCTION_COMPANIES:
      if (value == null) {
        unsetProduction_companies();
      } else {
        setProduction_companies((List<ProductionCompany>)value);
      }
      break;

    case PRODUCTION_COUNTRIES:
      if (value == null) {
        unsetProduction_countries();
      } else {
        setProduction_countries((List<ProductionCountry>)value);
      }
      break;

    case RELEASE_DATE:
      if (value == null) {
        unsetRelease_date();
      } else {
        setRelease_date((String)value);
      }
      break;

    case REVENUE:
      if (value == null) {
        unsetRevenue();
      } else {
        setRevenue((Long)value);
      }
      break;

    case RUNTIME:
      if (value == null) {
        unsetRuntime();
      } else {
        setRuntime((Integer)value);
      }
      break;

    case SPOKEN_LANGUAGES:
      if (value == null) {
        unsetSpoken_languages();
      } else {
        setSpoken_languages((List<SpokenLanguage>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case TAGLINE:
      if (value == null) {
        unsetTagline();
      } else {
        setTagline((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case VIDEO:
      if (value == null) {
        unsetVideo();
      } else {
        setVideo((Boolean)value);
      }
      break;

    case VOTE_AVERAGE:
      if (value == null) {
        unsetVote_average();
      } else {
        setVote_average((Double)value);
      }
      break;

    case VOTE_COUNT:
      if (value == null) {
        unsetVote_count();
      } else {
        setVote_count((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADULT:
      return isAdult();

    case BACKDROP_PATH:
      return getBackdrop_path();

    case BELONGS_TO_COLLECTION:
      return getBelongs_to_collection();

    case BUDGET:
      return getBudget();

    case GENRES:
      return getGenres();

    case HOMEPAGE:
      return getHomepage();

    case ID:
      return getId();

    case IMDB_ID:
      return getImdb_id();

    case ORIGINAL_LANGUAGE:
      return getOriginal_language();

    case ORIGINAL_TITLE:
      return getOriginal_title();

    case OVERVIEW:
      return getOverview();

    case POPULARITY:
      return getPopularity();

    case POSTER_PATH:
      return getPoster_path();

    case PRODUCTION_COMPANIES:
      return getProduction_companies();

    case PRODUCTION_COUNTRIES:
      return getProduction_countries();

    case RELEASE_DATE:
      return getRelease_date();

    case REVENUE:
      return getRevenue();

    case RUNTIME:
      return getRuntime();

    case SPOKEN_LANGUAGES:
      return getSpoken_languages();

    case STATUS:
      return getStatus();

    case TAGLINE:
      return getTagline();

    case TITLE:
      return getTitle();

    case VIDEO:
      return isVideo();

    case VOTE_AVERAGE:
      return getVote_average();

    case VOTE_COUNT:
      return getVote_count();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADULT:
      return isSetAdult();
    case BACKDROP_PATH:
      return isSetBackdrop_path();
    case BELONGS_TO_COLLECTION:
      return isSetBelongs_to_collection();
    case BUDGET:
      return isSetBudget();
    case GENRES:
      return isSetGenres();
    case HOMEPAGE:
      return isSetHomepage();
    case ID:
      return isSetId();
    case IMDB_ID:
      return isSetImdb_id();
    case ORIGINAL_LANGUAGE:
      return isSetOriginal_language();
    case ORIGINAL_TITLE:
      return isSetOriginal_title();
    case OVERVIEW:
      return isSetOverview();
    case POPULARITY:
      return isSetPopularity();
    case POSTER_PATH:
      return isSetPoster_path();
    case PRODUCTION_COMPANIES:
      return isSetProduction_companies();
    case PRODUCTION_COUNTRIES:
      return isSetProduction_countries();
    case RELEASE_DATE:
      return isSetRelease_date();
    case REVENUE:
      return isSetRevenue();
    case RUNTIME:
      return isSetRuntime();
    case SPOKEN_LANGUAGES:
      return isSetSpoken_languages();
    case STATUS:
      return isSetStatus();
    case TAGLINE:
      return isSetTagline();
    case TITLE:
      return isSetTitle();
    case VIDEO:
      return isSetVideo();
    case VOTE_AVERAGE:
      return isSetVote_average();
    case VOTE_COUNT:
      return isSetVote_count();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Movie)
      return this.equals((Movie)that);
    return false;
  }

  public boolean equals(Movie that) {
    if (that == null)
      return false;

    boolean this_present_adult = true;
    boolean that_present_adult = true;
    if (this_present_adult || that_present_adult) {
      if (!(this_present_adult && that_present_adult))
        return false;
      if (this.adult != that.adult)
        return false;
    }

    boolean this_present_backdrop_path = true && this.isSetBackdrop_path();
    boolean that_present_backdrop_path = true && that.isSetBackdrop_path();
    if (this_present_backdrop_path || that_present_backdrop_path) {
      if (!(this_present_backdrop_path && that_present_backdrop_path))
        return false;
      if (!this.backdrop_path.equals(that.backdrop_path))
        return false;
    }

    boolean this_present_belongs_to_collection = true && this.isSetBelongs_to_collection();
    boolean that_present_belongs_to_collection = true && that.isSetBelongs_to_collection();
    if (this_present_belongs_to_collection || that_present_belongs_to_collection) {
      if (!(this_present_belongs_to_collection && that_present_belongs_to_collection))
        return false;
      if (!this.belongs_to_collection.equals(that.belongs_to_collection))
        return false;
    }

    boolean this_present_budget = true;
    boolean that_present_budget = true;
    if (this_present_budget || that_present_budget) {
      if (!(this_present_budget && that_present_budget))
        return false;
      if (this.budget != that.budget)
        return false;
    }

    boolean this_present_genres = true && this.isSetGenres();
    boolean that_present_genres = true && that.isSetGenres();
    if (this_present_genres || that_present_genres) {
      if (!(this_present_genres && that_present_genres))
        return false;
      if (!this.genres.equals(that.genres))
        return false;
    }

    boolean this_present_homepage = true && this.isSetHomepage();
    boolean that_present_homepage = true && that.isSetHomepage();
    if (this_present_homepage || that_present_homepage) {
      if (!(this_present_homepage && that_present_homepage))
        return false;
      if (!this.homepage.equals(that.homepage))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_imdb_id = true && this.isSetImdb_id();
    boolean that_present_imdb_id = true && that.isSetImdb_id();
    if (this_present_imdb_id || that_present_imdb_id) {
      if (!(this_present_imdb_id && that_present_imdb_id))
        return false;
      if (!this.imdb_id.equals(that.imdb_id))
        return false;
    }

    boolean this_present_original_language = true && this.isSetOriginal_language();
    boolean that_present_original_language = true && that.isSetOriginal_language();
    if (this_present_original_language || that_present_original_language) {
      if (!(this_present_original_language && that_present_original_language))
        return false;
      if (!this.original_language.equals(that.original_language))
        return false;
    }

    boolean this_present_original_title = true && this.isSetOriginal_title();
    boolean that_present_original_title = true && that.isSetOriginal_title();
    if (this_present_original_title || that_present_original_title) {
      if (!(this_present_original_title && that_present_original_title))
        return false;
      if (!this.original_title.equals(that.original_title))
        return false;
    }

    boolean this_present_overview = true && this.isSetOverview();
    boolean that_present_overview = true && that.isSetOverview();
    if (this_present_overview || that_present_overview) {
      if (!(this_present_overview && that_present_overview))
        return false;
      if (!this.overview.equals(that.overview))
        return false;
    }

    boolean this_present_popularity = true;
    boolean that_present_popularity = true;
    if (this_present_popularity || that_present_popularity) {
      if (!(this_present_popularity && that_present_popularity))
        return false;
      if (this.popularity != that.popularity)
        return false;
    }

    boolean this_present_poster_path = true && this.isSetPoster_path();
    boolean that_present_poster_path = true && that.isSetPoster_path();
    if (this_present_poster_path || that_present_poster_path) {
      if (!(this_present_poster_path && that_present_poster_path))
        return false;
      if (!this.poster_path.equals(that.poster_path))
        return false;
    }

    boolean this_present_production_companies = true && this.isSetProduction_companies();
    boolean that_present_production_companies = true && that.isSetProduction_companies();
    if (this_present_production_companies || that_present_production_companies) {
      if (!(this_present_production_companies && that_present_production_companies))
        return false;
      if (!this.production_companies.equals(that.production_companies))
        return false;
    }

    boolean this_present_production_countries = true && this.isSetProduction_countries();
    boolean that_present_production_countries = true && that.isSetProduction_countries();
    if (this_present_production_countries || that_present_production_countries) {
      if (!(this_present_production_countries && that_present_production_countries))
        return false;
      if (!this.production_countries.equals(that.production_countries))
        return false;
    }

    boolean this_present_release_date = true && this.isSetRelease_date();
    boolean that_present_release_date = true && that.isSetRelease_date();
    if (this_present_release_date || that_present_release_date) {
      if (!(this_present_release_date && that_present_release_date))
        return false;
      if (!this.release_date.equals(that.release_date))
        return false;
    }

    boolean this_present_revenue = true;
    boolean that_present_revenue = true;
    if (this_present_revenue || that_present_revenue) {
      if (!(this_present_revenue && that_present_revenue))
        return false;
      if (this.revenue != that.revenue)
        return false;
    }

    boolean this_present_runtime = true;
    boolean that_present_runtime = true;
    if (this_present_runtime || that_present_runtime) {
      if (!(this_present_runtime && that_present_runtime))
        return false;
      if (this.runtime != that.runtime)
        return false;
    }

    boolean this_present_spoken_languages = true && this.isSetSpoken_languages();
    boolean that_present_spoken_languages = true && that.isSetSpoken_languages();
    if (this_present_spoken_languages || that_present_spoken_languages) {
      if (!(this_present_spoken_languages && that_present_spoken_languages))
        return false;
      if (!this.spoken_languages.equals(that.spoken_languages))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_tagline = true && this.isSetTagline();
    boolean that_present_tagline = true && that.isSetTagline();
    if (this_present_tagline || that_present_tagline) {
      if (!(this_present_tagline && that_present_tagline))
        return false;
      if (!this.tagline.equals(that.tagline))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_video = true;
    boolean that_present_video = true;
    if (this_present_video || that_present_video) {
      if (!(this_present_video && that_present_video))
        return false;
      if (this.video != that.video)
        return false;
    }

    boolean this_present_vote_average = true;
    boolean that_present_vote_average = true;
    if (this_present_vote_average || that_present_vote_average) {
      if (!(this_present_vote_average && that_present_vote_average))
        return false;
      if (this.vote_average != that.vote_average)
        return false;
    }

    boolean this_present_vote_count = true;
    boolean that_present_vote_count = true;
    if (this_present_vote_count || that_present_vote_count) {
      if (!(this_present_vote_count && that_present_vote_count))
        return false;
      if (this.vote_count != that.vote_count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_adult = true;
    list.add(present_adult);
    if (present_adult)
      list.add(adult);

    boolean present_backdrop_path = true && (isSetBackdrop_path());
    list.add(present_backdrop_path);
    if (present_backdrop_path)
      list.add(backdrop_path);

    boolean present_belongs_to_collection = true && (isSetBelongs_to_collection());
    list.add(present_belongs_to_collection);
    if (present_belongs_to_collection)
      list.add(belongs_to_collection);

    boolean present_budget = true;
    list.add(present_budget);
    if (present_budget)
      list.add(budget);

    boolean present_genres = true && (isSetGenres());
    list.add(present_genres);
    if (present_genres)
      list.add(genres);

    boolean present_homepage = true && (isSetHomepage());
    list.add(present_homepage);
    if (present_homepage)
      list.add(homepage);

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_imdb_id = true && (isSetImdb_id());
    list.add(present_imdb_id);
    if (present_imdb_id)
      list.add(imdb_id);

    boolean present_original_language = true && (isSetOriginal_language());
    list.add(present_original_language);
    if (present_original_language)
      list.add(original_language);

    boolean present_original_title = true && (isSetOriginal_title());
    list.add(present_original_title);
    if (present_original_title)
      list.add(original_title);

    boolean present_overview = true && (isSetOverview());
    list.add(present_overview);
    if (present_overview)
      list.add(overview);

    boolean present_popularity = true;
    list.add(present_popularity);
    if (present_popularity)
      list.add(popularity);

    boolean present_poster_path = true && (isSetPoster_path());
    list.add(present_poster_path);
    if (present_poster_path)
      list.add(poster_path);

    boolean present_production_companies = true && (isSetProduction_companies());
    list.add(present_production_companies);
    if (present_production_companies)
      list.add(production_companies);

    boolean present_production_countries = true && (isSetProduction_countries());
    list.add(present_production_countries);
    if (present_production_countries)
      list.add(production_countries);

    boolean present_release_date = true && (isSetRelease_date());
    list.add(present_release_date);
    if (present_release_date)
      list.add(release_date);

    boolean present_revenue = true;
    list.add(present_revenue);
    if (present_revenue)
      list.add(revenue);

    boolean present_runtime = true;
    list.add(present_runtime);
    if (present_runtime)
      list.add(runtime);

    boolean present_spoken_languages = true && (isSetSpoken_languages());
    list.add(present_spoken_languages);
    if (present_spoken_languages)
      list.add(spoken_languages);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_tagline = true && (isSetTagline());
    list.add(present_tagline);
    if (present_tagline)
      list.add(tagline);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_video = true;
    list.add(present_video);
    if (present_video)
      list.add(video);

    boolean present_vote_average = true;
    list.add(present_vote_average);
    if (present_vote_average)
      list.add(vote_average);

    boolean present_vote_count = true;
    list.add(present_vote_count);
    if (present_vote_count)
      list.add(vote_count);

    return list.hashCode();
  }

  @Override
  public int compareTo(Movie other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdult()).compareTo(other.isSetAdult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adult, other.adult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackdrop_path()).compareTo(other.isSetBackdrop_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackdrop_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backdrop_path, other.backdrop_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBelongs_to_collection()).compareTo(other.isSetBelongs_to_collection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBelongs_to_collection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.belongs_to_collection, other.belongs_to_collection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBudget()).compareTo(other.isSetBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.budget, other.budget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenres()).compareTo(other.isSetGenres());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenres()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genres, other.genres);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomepage()).compareTo(other.isSetHomepage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomepage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homepage, other.homepage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImdb_id()).compareTo(other.isSetImdb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImdb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imdb_id, other.imdb_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginal_language()).compareTo(other.isSetOriginal_language());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginal_language()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.original_language, other.original_language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginal_title()).compareTo(other.isSetOriginal_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginal_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.original_title, other.original_title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverview()).compareTo(other.isSetOverview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overview, other.overview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPopularity()).compareTo(other.isSetPopularity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopularity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popularity, other.popularity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoster_path()).compareTo(other.isSetPoster_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoster_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poster_path, other.poster_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProduction_companies()).compareTo(other.isSetProduction_companies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduction_companies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.production_companies, other.production_companies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProduction_countries()).compareTo(other.isSetProduction_countries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduction_countries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.production_countries, other.production_countries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelease_date()).compareTo(other.isSetRelease_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelease_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.release_date, other.release_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevenue()).compareTo(other.isSetRevenue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevenue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revenue, other.revenue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime()).compareTo(other.isSetRuntime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime, other.runtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpoken_languages()).compareTo(other.isSetSpoken_languages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpoken_languages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spoken_languages, other.spoken_languages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagline()).compareTo(other.isSetTagline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagline, other.tagline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideo()).compareTo(other.isSetVideo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.video, other.video);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVote_average()).compareTo(other.isSetVote_average());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVote_average()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vote_average, other.vote_average);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVote_count()).compareTo(other.isSetVote_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVote_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vote_count, other.vote_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Movie(");
    boolean first = true;

    sb.append("adult:");
    sb.append(this.adult);
    first = false;
    if (isSetBackdrop_path()) {
      if (!first) sb.append(", ");
      sb.append("backdrop_path:");
      if (this.backdrop_path == null) {
        sb.append("null");
      } else {
        sb.append(this.backdrop_path);
      }
      first = false;
    }
    if (isSetBelongs_to_collection()) {
      if (!first) sb.append(", ");
      sb.append("belongs_to_collection:");
      if (this.belongs_to_collection == null) {
        sb.append("null");
      } else {
        sb.append(this.belongs_to_collection);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("budget:");
    sb.append(this.budget);
    first = false;
    if (!first) sb.append(", ");
    sb.append("genres:");
    if (this.genres == null) {
      sb.append("null");
    } else {
      sb.append(this.genres);
    }
    first = false;
    if (isSetHomepage()) {
      if (!first) sb.append(", ");
      sb.append("homepage:");
      if (this.homepage == null) {
        sb.append("null");
      } else {
        sb.append(this.homepage);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imdb_id:");
    if (this.imdb_id == null) {
      sb.append("null");
    } else {
      sb.append(this.imdb_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("original_language:");
    if (this.original_language == null) {
      sb.append("null");
    } else {
      sb.append(this.original_language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("original_title:");
    if (this.original_title == null) {
      sb.append("null");
    } else {
      sb.append(this.original_title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overview:");
    if (this.overview == null) {
      sb.append("null");
    } else {
      sb.append(this.overview);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("popularity:");
    sb.append(this.popularity);
    first = false;
    if (isSetPoster_path()) {
      if (!first) sb.append(", ");
      sb.append("poster_path:");
      if (this.poster_path == null) {
        sb.append("null");
      } else {
        sb.append(this.poster_path);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("production_companies:");
    if (this.production_companies == null) {
      sb.append("null");
    } else {
      sb.append(this.production_companies);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("production_countries:");
    if (this.production_countries == null) {
      sb.append("null");
    } else {
      sb.append(this.production_countries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("release_date:");
    if (this.release_date == null) {
      sb.append("null");
    } else {
      sb.append(this.release_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revenue:");
    sb.append(this.revenue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("runtime:");
    sb.append(this.runtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spoken_languages:");
    if (this.spoken_languages == null) {
      sb.append("null");
    } else {
      sb.append(this.spoken_languages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagline:");
    if (this.tagline == null) {
      sb.append("null");
    } else {
      sb.append(this.tagline);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("video:");
    sb.append(this.video);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vote_average:");
    sb.append(this.vote_average);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vote_count:");
    sb.append(this.vote_count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MovieStandardSchemeFactory implements SchemeFactory {
    public MovieStandardScheme getScheme() {
      return new MovieStandardScheme();
    }
  }

  private static class MovieStandardScheme extends StandardScheme<Movie> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Movie struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.adult = iprot.readBool();
              struct.setAdultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BACKDROP_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backdrop_path = iprot.readString();
              struct.setBackdrop_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BELONGS_TO_COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.belongs_to_collection = new Collection();
              struct.belongs_to_collection.read(iprot);
              struct.setBelongs_to_collectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.budget = iprot.readI64();
              struct.setBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GENRES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.genres = new ArrayList<Genre>(_list8.size);
                Genre _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new Genre();
                  _elem9.read(iprot);
                  struct.genres.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setGenresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOMEPAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homepage = iprot.readString();
              struct.setHomepageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMDB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imdb_id = iprot.readString();
              struct.setImdb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORIGINAL_LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.original_language = iprot.readString();
              struct.setOriginal_languageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORIGINAL_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.original_title = iprot.readString();
              struct.setOriginal_titleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OVERVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.overview = iprot.readString();
              struct.setOverviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POPULARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.popularity = iprot.readDouble();
              struct.setPopularityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POSTER_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poster_path = iprot.readString();
              struct.setPoster_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRODUCTION_COMPANIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.production_companies = new ArrayList<ProductionCompany>(_list11.size);
                ProductionCompany _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new ProductionCompany();
                  _elem12.read(iprot);
                  struct.production_companies.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setProduction_companiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRODUCTION_COUNTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.production_countries = new ArrayList<ProductionCountry>(_list14.size);
                ProductionCountry _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = new ProductionCountry();
                  _elem15.read(iprot);
                  struct.production_countries.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setProduction_countriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RELEASE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.release_date = iprot.readString();
              struct.setRelease_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REVENUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.revenue = iprot.readI64();
              struct.setRevenueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RUNTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime = iprot.readI32();
              struct.setRuntimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SPOKEN_LANGUAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.spoken_languages = new ArrayList<SpokenLanguage>(_list17.size);
                SpokenLanguage _elem18;
                for (int _i19 = 0; _i19 < _list17.size; ++_i19)
                {
                  _elem18 = new SpokenLanguage();
                  _elem18.read(iprot);
                  struct.spoken_languages.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setSpoken_languagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TAGLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagline = iprot.readString();
              struct.setTaglineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // VIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.video = iprot.readBool();
              struct.setVideoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // VOTE_AVERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vote_average = iprot.readDouble();
              struct.setVote_averageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // VOTE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vote_count = iprot.readI32();
              struct.setVote_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Movie struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ADULT_FIELD_DESC);
      oprot.writeBool(struct.adult);
      oprot.writeFieldEnd();
      if (struct.backdrop_path != null) {
        if (struct.isSetBackdrop_path()) {
          oprot.writeFieldBegin(BACKDROP_PATH_FIELD_DESC);
          oprot.writeString(struct.backdrop_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.belongs_to_collection != null) {
        if (struct.isSetBelongs_to_collection()) {
          oprot.writeFieldBegin(BELONGS_TO_COLLECTION_FIELD_DESC);
          struct.belongs_to_collection.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(BUDGET_FIELD_DESC);
      oprot.writeI64(struct.budget);
      oprot.writeFieldEnd();
      if (struct.genres != null) {
        oprot.writeFieldBegin(GENRES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.genres.size()));
          for (Genre _iter20 : struct.genres)
          {
            _iter20.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.homepage != null) {
        if (struct.isSetHomepage()) {
          oprot.writeFieldBegin(HOMEPAGE_FIELD_DESC);
          oprot.writeString(struct.homepage);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.imdb_id != null) {
        oprot.writeFieldBegin(IMDB_ID_FIELD_DESC);
        oprot.writeString(struct.imdb_id);
        oprot.writeFieldEnd();
      }
      if (struct.original_language != null) {
        oprot.writeFieldBegin(ORIGINAL_LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.original_language);
        oprot.writeFieldEnd();
      }
      if (struct.original_title != null) {
        oprot.writeFieldBegin(ORIGINAL_TITLE_FIELD_DESC);
        oprot.writeString(struct.original_title);
        oprot.writeFieldEnd();
      }
      if (struct.overview != null) {
        oprot.writeFieldBegin(OVERVIEW_FIELD_DESC);
        oprot.writeString(struct.overview);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POPULARITY_FIELD_DESC);
      oprot.writeDouble(struct.popularity);
      oprot.writeFieldEnd();
      if (struct.poster_path != null) {
        if (struct.isSetPoster_path()) {
          oprot.writeFieldBegin(POSTER_PATH_FIELD_DESC);
          oprot.writeString(struct.poster_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.production_companies != null) {
        oprot.writeFieldBegin(PRODUCTION_COMPANIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.production_companies.size()));
          for (ProductionCompany _iter21 : struct.production_companies)
          {
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.production_countries != null) {
        oprot.writeFieldBegin(PRODUCTION_COUNTRIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.production_countries.size()));
          for (ProductionCountry _iter22 : struct.production_countries)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.release_date != null) {
        oprot.writeFieldBegin(RELEASE_DATE_FIELD_DESC);
        oprot.writeString(struct.release_date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVENUE_FIELD_DESC);
      oprot.writeI64(struct.revenue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RUNTIME_FIELD_DESC);
      oprot.writeI32(struct.runtime);
      oprot.writeFieldEnd();
      if (struct.spoken_languages != null) {
        oprot.writeFieldBegin(SPOKEN_LANGUAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spoken_languages.size()));
          for (SpokenLanguage _iter23 : struct.spoken_languages)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.tagline != null) {
        oprot.writeFieldBegin(TAGLINE_FIELD_DESC);
        oprot.writeString(struct.tagline);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIDEO_FIELD_DESC);
      oprot.writeBool(struct.video);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOTE_AVERAGE_FIELD_DESC);
      oprot.writeDouble(struct.vote_average);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOTE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.vote_count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MovieTupleSchemeFactory implements SchemeFactory {
    public MovieTupleScheme getScheme() {
      return new MovieTupleScheme();
    }
  }

  private static class MovieTupleScheme extends TupleScheme<Movie> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Movie struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAdult()) {
        optionals.set(0);
      }
      if (struct.isSetBackdrop_path()) {
        optionals.set(1);
      }
      if (struct.isSetBelongs_to_collection()) {
        optionals.set(2);
      }
      if (struct.isSetBudget()) {
        optionals.set(3);
      }
      if (struct.isSetGenres()) {
        optionals.set(4);
      }
      if (struct.isSetHomepage()) {
        optionals.set(5);
      }
      if (struct.isSetId()) {
        optionals.set(6);
      }
      if (struct.isSetImdb_id()) {
        optionals.set(7);
      }
      if (struct.isSetOriginal_language()) {
        optionals.set(8);
      }
      if (struct.isSetOriginal_title()) {
        optionals.set(9);
      }
      if (struct.isSetOverview()) {
        optionals.set(10);
      }
      if (struct.isSetPopularity()) {
        optionals.set(11);
      }
      if (struct.isSetPoster_path()) {
        optionals.set(12);
      }
      if (struct.isSetProduction_companies()) {
        optionals.set(13);
      }
      if (struct.isSetProduction_countries()) {
        optionals.set(14);
      }
      if (struct.isSetRelease_date()) {
        optionals.set(15);
      }
      if (struct.isSetRevenue()) {
        optionals.set(16);
      }
      if (struct.isSetRuntime()) {
        optionals.set(17);
      }
      if (struct.isSetSpoken_languages()) {
        optionals.set(18);
      }
      if (struct.isSetStatus()) {
        optionals.set(19);
      }
      if (struct.isSetTagline()) {
        optionals.set(20);
      }
      if (struct.isSetTitle()) {
        optionals.set(21);
      }
      if (struct.isSetVideo()) {
        optionals.set(22);
      }
      if (struct.isSetVote_average()) {
        optionals.set(23);
      }
      if (struct.isSetVote_count()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetAdult()) {
        oprot.writeBool(struct.adult);
      }
      if (struct.isSetBackdrop_path()) {
        oprot.writeString(struct.backdrop_path);
      }
      if (struct.isSetBelongs_to_collection()) {
        struct.belongs_to_collection.write(oprot);
      }
      if (struct.isSetBudget()) {
        oprot.writeI64(struct.budget);
      }
      if (struct.isSetGenres()) {
        {
          oprot.writeI32(struct.genres.size());
          for (Genre _iter24 : struct.genres)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetHomepage()) {
        oprot.writeString(struct.homepage);
      }
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetImdb_id()) {
        oprot.writeString(struct.imdb_id);
      }
      if (struct.isSetOriginal_language()) {
        oprot.writeString(struct.original_language);
      }
      if (struct.isSetOriginal_title()) {
        oprot.writeString(struct.original_title);
      }
      if (struct.isSetOverview()) {
        oprot.writeString(struct.overview);
      }
      if (struct.isSetPopularity()) {
        oprot.writeDouble(struct.popularity);
      }
      if (struct.isSetPoster_path()) {
        oprot.writeString(struct.poster_path);
      }
      if (struct.isSetProduction_companies()) {
        {
          oprot.writeI32(struct.production_companies.size());
          for (ProductionCompany _iter25 : struct.production_companies)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetProduction_countries()) {
        {
          oprot.writeI32(struct.production_countries.size());
          for (ProductionCountry _iter26 : struct.production_countries)
          {
            _iter26.write(oprot);
          }
        }
      }
      if (struct.isSetRelease_date()) {
        oprot.writeString(struct.release_date);
      }
      if (struct.isSetRevenue()) {
        oprot.writeI64(struct.revenue);
      }
      if (struct.isSetRuntime()) {
        oprot.writeI32(struct.runtime);
      }
      if (struct.isSetSpoken_languages()) {
        {
          oprot.writeI32(struct.spoken_languages.size());
          for (SpokenLanguage _iter27 : struct.spoken_languages)
          {
            _iter27.write(oprot);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetTagline()) {
        oprot.writeString(struct.tagline);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetVideo()) {
        oprot.writeBool(struct.video);
      }
      if (struct.isSetVote_average()) {
        oprot.writeDouble(struct.vote_average);
      }
      if (struct.isSetVote_count()) {
        oprot.writeI32(struct.vote_count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Movie struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.adult = iprot.readBool();
        struct.setAdultIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backdrop_path = iprot.readString();
        struct.setBackdrop_pathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.belongs_to_collection = new Collection();
        struct.belongs_to_collection.read(iprot);
        struct.setBelongs_to_collectionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.budget = iprot.readI64();
        struct.setBudgetIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.genres = new ArrayList<Genre>(_list28.size);
          Genre _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = new Genre();
            _elem29.read(iprot);
            struct.genres.add(_elem29);
          }
        }
        struct.setGenresIsSet(true);
      }
      if (incoming.get(5)) {
        struct.homepage = iprot.readString();
        struct.setHomepageIsSet(true);
      }
      if (incoming.get(6)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.imdb_id = iprot.readString();
        struct.setImdb_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.original_language = iprot.readString();
        struct.setOriginal_languageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.original_title = iprot.readString();
        struct.setOriginal_titleIsSet(true);
      }
      if (incoming.get(10)) {
        struct.overview = iprot.readString();
        struct.setOverviewIsSet(true);
      }
      if (incoming.get(11)) {
        struct.popularity = iprot.readDouble();
        struct.setPopularityIsSet(true);
      }
      if (incoming.get(12)) {
        struct.poster_path = iprot.readString();
        struct.setPoster_pathIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.production_companies = new ArrayList<ProductionCompany>(_list31.size);
          ProductionCompany _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new ProductionCompany();
            _elem32.read(iprot);
            struct.production_companies.add(_elem32);
          }
        }
        struct.setProduction_companiesIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.production_countries = new ArrayList<ProductionCountry>(_list34.size);
          ProductionCountry _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new ProductionCountry();
            _elem35.read(iprot);
            struct.production_countries.add(_elem35);
          }
        }
        struct.setProduction_countriesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.release_date = iprot.readString();
        struct.setRelease_dateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.revenue = iprot.readI64();
        struct.setRevenueIsSet(true);
      }
      if (incoming.get(17)) {
        struct.runtime = iprot.readI32();
        struct.setRuntimeIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spoken_languages = new ArrayList<SpokenLanguage>(_list37.size);
          SpokenLanguage _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new SpokenLanguage();
            _elem38.read(iprot);
            struct.spoken_languages.add(_elem38);
          }
        }
        struct.setSpoken_languagesIsSet(true);
      }
      if (incoming.get(19)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.tagline = iprot.readString();
        struct.setTaglineIsSet(true);
      }
      if (incoming.get(21)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(22)) {
        struct.video = iprot.readBool();
        struct.setVideoIsSet(true);
      }
      if (incoming.get(23)) {
        struct.vote_average = iprot.readDouble();
        struct.setVote_averageIsSet(true);
      }
      if (incoming.get(24)) {
        struct.vote_count = iprot.readI32();
        struct.setVote_countIsSet(true);
      }
    }
  }

}

